name: CI

on:
  push:
    branches:
    - main
  schedule:
    - cron: "0 0 */7 * *"
  
jobs:
  build_docs:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          repository: 'supercollider/supercollider'
      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake libjack-jackd2-dev libsndfile1-dev libfftw3-dev libxt-dev libavahi-client-dev
      - name: configure
        run: |
          mkdir build && cd build
          cmake -DSC_EL=OFF -DSC_VIM=OFF -DSC_ED=OFF -DSC_QT=OFF -DSC_IDE=OFF -DCMAKE_BUILD_TYPE=Release ..
      - name: build
        run: |
          cd build
          make install -j2
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip

  # originated from a combination of cmake target "doc" and GHA linux test
  deploy_docs:
    needs: [Linux]
    runs-on: ubuntu-22.04
    name: 'deploy documentation'
    env:
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      SCLANG: 'build/Install/bin/sclang'
      ARTIFACT_FILE: SuperCollider-${{ needs.lint.outputs.sc-version }}-linux-bionic-gcc10
      RENDERED_HELP: ${{ github.workspace }}/RenderedHelp
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: download linux artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}
      - name: extract artifact
        run: |
          cd $INSTALL_PATH
          unzip $ARTIFACT_FILE.zip
      - name: setup Linux environment
        run: |
          # install dependencies
          sudo apt-get update
          sudo apt-get install --yes libsndfile1 libavahi-client-dev libfftw3-dev libicu-dev libudev-dev qt5-default qtwebengine5-dev jackd1

          # start jack
          jackd --no-realtime -d dummy & 
      - name: build HTML documentation
        run: |
          mkdir $RENDERED_HELP
          xvfb-run --server-args="-screen 0, 1280x720x24" -a $SCLANG ${{ github.workspace }}/platform/renderAllHelp.scd ${{ github.workspace }}/HelpSource $RENDERED_HELP
      - name: replace URLs to GitHub URLs
        run: |
          cp $RENDERED_HELP/Help.html $RENDERED_HELP/index.html
          find ./RenderedHelp/ -type f -exec sed -i -e 's_file:///home/runner/work/supercollider/supercollider/build/Install/share/SuperCollider/SCClassLibrary/_https://github.com/supercollider/supercollider/tree/develop/SCClassLibrary/_g' {} \;
          find ./RenderedHelp/ -type f -exec sed -i -e 's_file:///home/runner/work/supercollider/supercollider/HelpSource/_https://github.com/supercollider/supercollider/tree/develop/HelpSource/_g' {} \; 
          find ./RenderedHelp/ -type f -exec sed -i -e 's_/home/runner/work/supercollider/supercollider/build/Install/share/SuperCollider/SCClassLibrary/_https://github.com/supercollider/supercollider/tree/develop/SCClassLibrary/_g' {} \; 
          find ./RenderedHelp/ -type f -exec sed -i -e 's_/home/runner/work/supercollider/supercollider/HelpSource/_https://github.com/supercollider/supercollider/tree/develop/HelpSource_g' {} \; 
      - name: upload HTML documentation as gh-pages branch
        uses: peaceiris/actions-gh-pages@v3.6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: RenderedHelp
