name: CI

on:
  push:
    branches:
    - main
  schedule:
    - cron: "0 0 */7 * *"
  
jobs:
  Linux:
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: 'focal clang10'
            os-version: '20.04'
            c-compiler: 'clang-10'
            cxx-compiler: 'clang++-10'
            use-syslibs: false
            shared-libscsynth: false

    name: Linux ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      CC: ${{ matrix.c-compiler }}
      CXX: ${{ matrix.cxx-compiler }}
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          repository: 'supercollider/supercollider'
      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
      - name: cache ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache
          # clang and gcc compilers < 9.x are no longer on ubuntu images; install them manually
          if [[ "$CC" =~ clang-[1-8] ]]; then
            sudo apt-get install -y $CC # package names are clang-X
          elif [[ "$CC" =~ gcc-[1-8] ]]; then
            sudo apt-get install -y $CXX # package names are g++-X
          fi
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: sudo apt-get install --yes libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev
      - name: install qt from apt
        run: sudo apt-get install qt5-default qt5-qmake qttools5-dev qttools5-dev-tools qtdeclarative5-dev libqt5svg5-dev libqt5websockets5-dev qtwebengine5-dev
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_ED=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output
      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE.zip .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip

  # originated from a combination of cmake target "doc" and GHA linux test
  deploy_docs:
    needs: [Linux]
    runs-on: ubuntu-20.04
    name: 'deploy documentation'
    env:
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      SCLANG: 'build/Install/bin/sclang'
      ARTIFACT_FILE: SuperCollider-${{ needs.lint.outputs.sc-version }}-linux-focal-clang10
      RENDERED_HELP: ${{ github.workspace }}/RenderedHelp
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: download linux artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}
      - name: extract artifact
        run: |
          cd $INSTALL_PATH
          unzip $ARTIFACT_FILE.zip
      - name: setup Linux environment
        run: |
          # install dependencies
          sudo apt-get update
          sudo apt-get install --yes libsndfile1 libavahi-client-dev libfftw3-dev libicu-dev libudev-dev qt5-default qtwebengine5-dev jackd1

          # start jack
          jackd --no-realtime -d dummy & 
      - name: build HTML documentation
        run: |
          mkdir $RENDERED_HELP
          xvfb-run --server-args="-screen 0, 1280x720x24" -a $SCLANG ${{ github.workspace }}/platform/renderAllHelp.scd ${{ github.workspace }}/HelpSource $RENDERED_HELP
      - name: replace URLs to GitHub URLs
        run: |
          cp $RENDERED_HELP/Help.html $RENDERED_HELP/index.html
          find ./RenderedHelp/ -type f -exec sed -i -e 's_file:///home/runner/work/supercollider/supercollider/build/Install/share/SuperCollider/SCClassLibrary/_https://github.com/supercollider/supercollider/tree/develop/SCClassLibrary/_g' {} \;
          find ./RenderedHelp/ -type f -exec sed -i -e 's_file:///home/runner/work/supercollider/supercollider/HelpSource/_https://github.com/supercollider/supercollider/tree/develop/HelpSource/_g' {} \; 
          find ./RenderedHelp/ -type f -exec sed -i -e 's_/home/runner/work/supercollider/supercollider/build/Install/share/SuperCollider/SCClassLibrary/_https://github.com/supercollider/supercollider/tree/develop/SCClassLibrary/_g' {} \; 
          find ./RenderedHelp/ -type f -exec sed -i -e 's_/home/runner/work/supercollider/supercollider/HelpSource/_https://github.com/supercollider/supercollider/tree/develop/HelpSource_g' {} \; 
      - name: upload HTML documentation as gh-pages branch
        uses: peaceiris/actions-gh-pages@v3.6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: RenderedHelp
